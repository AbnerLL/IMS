<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置controller注解扫描-->
    <context:component-scan base-package="com.navinfo" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>

    <!--设置aop代理需要将改配置放置mvc配置文件中-->
    <!--设置proxy-target-class='true'使其动态代理对象可以为类，而不是仅仅为默认的接口（需要引入cglib包）-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--配置视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--要过滤静态资源 (过滤静态资源方式一，可以只用一种)-->
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/fonts/**" location="/fonts/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <!--将mvc无法映射的请求交给容器处理(过滤静态资源方式二，可以只用一种)-->
    <mvc:default-servlet-handler/>

    <!--配置消息转换器-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="fastJsonHttpMessageConverter"></ref>
            </list>
        </property>
    </bean>
    <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <!--<bean class="org.springframework.http.MediaType">-->
                    <!--<constructor-arg index="0" value="text"/>-->
                    <!--<constructor-arg index="1" value="plain"/>-->
                    <!--<constructor-arg index="2" value="UTF-8"/>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.http.MediaType">-->
                    <!--<constructor-arg index="0" value="*"/>-->
                    <!--<constructor-arg index="1" value="*"/>-->
                    <!--<constructor-arg index="2" value="UTF-8"/>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.http.MediaType">-->
                    <!--<constructor-arg index="0" value="text"/>-->
                    <!--<constructor-arg index="1" value="*"/>-->
                    <!--<constructor-arg index="2" value="UTF-8"/>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.http.MediaType">-->
                    <!--<constructor-arg index="0" value="application"/>-->
                    <!--<constructor-arg index="1" value="json"/>-->
                    <!--<constructor-arg index="2" value="UTF-8"/>-->
                <!--</bean>-->
                <!-- 这里顺序不能反，一定先写text/html,不然ie下出现下载提示 -->
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--配置requestMappingHandle和RequestMappingHandleAdapter-->
    <!--如果容器中显示的定义了一个RequestMappingHandlerAdapter,则springMVC默认装配的HttpMessageConverter将不起作用-->
    <!--所以annotation-driven配置放在最后，以免加载了默认的消息转换器-->
    <mvc:annotation-driven/>
</beans>